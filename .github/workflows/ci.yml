name: CI workflow

on:
  workflow_dispatch:
    inputs:
      scratch_username:
        description: "when input, connected to username for scratch"
        required: false
        type: string
      run_e2e:
        description: "True to run e2e"
        required: true
        default: false
        type: boolean
      create_beta_package:
        description: "True to create beta package"
        required: true
        default: false
        type: boolean
      package_version_name:
        required: false
        type: string
      package_version_number:
        required: false
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      scratch-username: ${{ steps.define-scratch-username.outputs.scratch-username }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup salesforce cli
        uses: ./.github/actions/setup-salesforce-cli

      - name: install sfdx-lwc-jest by npm
        run: |
          npm install

      - name: run jest
        run: |
          sf force lightning lwc test run

      - name: authorize devhub org
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
          encode_iv: ${{ secrets.devhub_org_encode_iv }}
          client_id: ${{ secrets.devhub_org_client_id }}
          username: ${{ secrets.devhub_org_username }}
          alias: devhub
          is-devhub: true
          set-default: true

      - name: create scratch org
        if: ${{ inputs.scratch_username == '' }}
        run: |
          sf org create scratch --definition-file config/project-scratch-def.json --name="ci org" --set-default --alias scratch --json

      - name: authorize scratch org
        if: ${{ inputs.scratch_username != '' }}
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
          encode_iv: ${{ secrets.devhub_org_encode_iv }}
          client_id: ${{ secrets.devhub_org_client_id }}
          username: ${{ inputs.scratch_username }}
          alias: scratch
          is-scratch: true
          set-default: true

      - name: define scratch username
        id: define-scratch-username
        run: |
          declare scratch_username=$(sf org display -o scratch --json | jq -r '.result.username')
          echo "scratch-username=${scratch_username}" >> "$GITHUB_OUTPUT"

      - name: generate password for test admin user
        run: |
          sf org generate password -o scratch

      - name: deploy to scratch org
        run: sf project deploy start --ignore-conflicts

      - name: run apex test
        id: run-apex-test
        run: |
          apex_test_results_dir=${RUNNER_TEMP}/build/apex-test-results
          sf apex run test --code-coverage --synchronous --result-format json --output-dir ${apex_test_results_dir}

          echo "apex_test_results_dir=${apex_test_results_dir}" >> "$GITHUB_OUTPUT"

      - name: archive apex test results
        id: archive-apex-test-results
        run: |
          declare apex_test_results_dir=${{ steps.run-apex-test.outputs.apex_test_results_dir }}
          declare archive_file=${RUNNER_TEMP}/$(basename ${apex_test_results_dir}).zip

          cd $(dirname ${apex_test_results_dir})
          zip -r ${archive_file} $(basename ${apex_test_results_dir})

          echo "archive_file=${archive_file}" >> "$GITHUB_OUTPUT"

      - name: upload apex test results
        uses: actions/upload-artifact@v3
        with:
          name: apex-test-results
          path: ${{ steps.archive-apex-test-results.outputs.archive_file }}

  e2e:
    needs: test
    if: ${{ inputs.run_e2e }}
    runs-on: ubuntu-latest
    env:
      scratch_username: ${{needs.test.outputs.scratch-username}}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup japanese fonts
        uses: ./.github/actions/setup-japanese-fonts

      - name: setup salesforce cli
        uses: ./.github/actions/setup-salesforce-cli

      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"

      - name: setup gauge
        uses: ./.github/actions/setup-gauge

      - name: authorize devhub org
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
          encode_iv: ${{ secrets.devhub_org_encode_iv }}
          client_id: ${{ secrets.devhub_org_client_id }}
          username: ${{ secrets.devhub_org_username }}
          alias: devhub
          is-devhub: true
          set-default: true

      - name: authorize scratch org
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
          encode_iv: ${{ secrets.devhub_org_encode_iv }}
          client_id: ${{ secrets.devhub_org_client_id }}
          username: ${scratch_username}
          alias: scratch
          is-scratch: true
          set-default: true

      - name: generate password for test admin user
        run: |
          sf org generate password -o scratch

      - name: set loginIpRange to admin profile
        uses: ./.github/actions/set-loginIpRanges-to-profile
        with:
          alias: scratch
          profile: Admin
          start-address: 0.0.0.0
          end-address: 255.255.255.255

      - name: set loginIpRange to standard profile
        uses: ./.github/actions/set-loginIpRanges-to-profile
        with:
          alias: scratch
          profile: Standard
          start-address: 0.0.0.0
          end-address: 255.255.255.255

      - name: find current standard user
        id: find-current-standard-user
        uses: ./.github/actions/find-user-by-profile
        with:
          alias: scratch
          profile: "標準ユーザ"

      - name: authorize scratch org for standard user
        if: ${{ steps.find-current-standard-user.outputs.username != '' }}
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
          encode_iv: ${{ secrets.devhub_org_encode_iv }}
          client_id: ${{ secrets.devhub_org_client_id }}
          username: ${{ steps.find-current-standard-user.outputs.username }}
          alias: scratch-standard
          is-scratch: true
          set-default: false

      - name: create standard user for test
        if: ${{ steps.find-current-standard-user.outputs.username == '' }}
        run: |
          sf org create user profileName="標準ユーザ" firstName=Standard --set-unique-username --set-alias=scratch-standard -o scratch --json

      - name: show list auth
        run: |
          sf org list auth

      - name: generate password for test standard user
        run: |
          sf org generate password -o scratch-standard

      - name: assign permissionSet to admin user
        uses: ./.github/actions/assign-permissionSet
        with:
          alias: scratch
          permissionSet-namespacePrefix: demo_aho
          permissionSet-name: admin_user

      - name: start ngrok
        id: start-ngrok
        run: |
          docker run -d --name ngrok -t -p 4040:4040 -e NGROK_AUTHTOKEN=${{ secrets.ngrok_authtoken }} ngrok/ngrok http host.docker.internal:8080
          docker ps

      - name: wait ngrok starting
        uses: cygnetdigital/wait_for_response@v2.0.0
        with:
          url: "http://localhost:4040/api/"
          responseCode: "200"
          timeout: 10000
          interval: 500

      - name: config ngrok
        id: config-ngrok
        run: |
          ngrok_public_url=$(curl http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.config.addr == "http://host.docker.internal:8080").public_url')
          echo "ngrok_public_url: ${ngrok_public_url}"

          echo "ngrok_public_url=${ngrok_public_url}" >> "$GITHUB_OUTPUT"

      - name: setup demo api
        run: |
          ngrok_public_url=${{ steps.config-ngrok.outputs.ngrok_public_url }}

          cd e2e

          ./script/setup-demo-api-host.sh scratch "${ngrok_public_url}"

      - name: configure .env-local
        run: |
          cd e2e

          env_local_file=./.env-local

          ./script/generate-env.sh scratch scratch-standard > "${env_local_file}"

          cat "${env_local_file}"

      - name: compile e2e
        id: compile-e2e
        run: |
          cd e2e
          ./mvnw clean test-compile

      - name: run e2e
        run: |
          cd e2e
          ./mvnw gauge:execute

      - name: archive e2e reports
        if: ${{ always() && steps.compile-e2e.conclusion == 'success' }}
        id: archive-e2e-reports
        run: |
          declare archive_file=${RUNNER_TEMP}/e2e-reports.zip

          cd e2e
          zip -r ${archive_file} reports

          echo "archive_file=${archive_file}" >> "$GITHUB_OUTPUT"

      - name: upload e2e reports
        if: ${{ always() && steps.archive-e2e-reports.conclusion == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-reports
          path: ${{ steps.archive-e2e-reports.outputs.archive_file }}

      - name: request http for ngrok
        if: ${{ always() && steps.start-ngrok.conclusion == 'success' }}
        run: |
          curl http://localhost:4040/api/requests/http | jq .

      - name: stop ngrok
        if: ${{ always() && steps.start-ngrok.conclusion == 'success' }}
        run: |
          container_name=$(docker ps -f name=ngrok --format json | jq -r '.Names')
          echo "container_name: ${container_name}"
          if [[ -n "${container_name}" ]]; then
            echo "container exist, stopping..."
            docker stop ngrok
          fi

  create-beta-package:
    needs: [test, e2e]
    if: ${{ inputs.create_beta_package }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup salesforce cli
        uses: ./.github/actions/setup-salesforce-cli

      - name: convert source to metadata
        run: |
          sf project convert source --output-dir metadata --package-name demo1stpkg --json
          ls -lR metadata
          cat metadata/package.xml

      - name: set postInstallClass and uninstallClass to metadata/package.xml
        run: |
          npm install -g fast-xml-parser
          npm list -g

          script_file=./.github/script/set-config-to-packagexml/index.js
          src_file=metadata/package.xml
          dst_file=${RUNNER_TEMP}/package.xml.new
          NODE_PATH="$(npm root -g):$NODE_PATH" node ${script_file} --src=${src_file} --dst=${dst_file} --post-install-class=PostInstallScript --uninstall-class=UninstallScript

          diff ${src_file} ${dst_file} || echo

          mv -f ${dst_file} ${src_file}

      - name: authorize package org
        uses: ./.github/actions/authorize-org
        with:
          encoded_private_key_content: ${{ secrets.package_org_encoded_private_key_content }}
          encode_raw_key: ${{ secrets.package_org_encode_raw_key }}
          encode_iv: ${{ secrets.package_org_encode_iv }}
          client_id: ${{ secrets.package_org_client_id }}
          username: ${{ secrets.package_org_username }}
          alias: package
          set-default: true

      - name: deploy metadata to package org
        run: |
          sf project deploy start --manifest metadata/package.xml

      - name: create beta package version
        uses: ./.github/actions/create-package-version
        with:
          metadata_package_id: ${{ secrets.package_metadata_package_id }}
          version_name: ${{ inputs.package_version_name }}
          version_number: ${{ inputs.package_version_number }}
          alias: package
