name: CI workflow

on:
  workflow_dispatch:
    inputs:
      scratch_username:
        description: 'when input, connected to username for scratch'
        required: false
        type: string
      create_beta_package:
        description: 'True to create beta package'
        required: true
        default: false
        type: boolean
      package_version_name:
        required: false
        type: string
      package_version_number:
          required: false
          type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: setup salesforce cli
      uses: ./.github/actions/setup-salesforce-cli

    - name: install sfdx-lwc-jest by npm
      run: |
        npm install
    
    - name: run jest
      run: |
        sf force lightning lwc test run

    - name: authorize devhub org
      uses: ./.github/actions/authorize-org
      with:
        encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
        encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
        encode_iv: ${{ secrets.devhub_org_encode_iv }}
        client_id: ${{ secrets.devhub_org_client_id }}
        username: ${{ secrets.devhub_org_username }}
        alias: devhub
        is-devhub: true
        set-default: true
    
    - name: create scratch org
      if: ${{ inputs.scratch_username == '' }}
      run: |
        sf org create scratch --definition-file config/project-scratch-def.json --set-default --alias scratch --json

    - name: authorize scratch org
      uses: ./.github/actions/authorize-org
      with:
        encoded_private_key_content: ${{ secrets.devhub_org_encoded_private_key_content }}
        encode_raw_key: ${{ secrets.devhub_org_encode_raw_key }}
        encode_iv: ${{ secrets.devhub_org_encode_iv }}
        client_id: ${{ secrets.devhub_org_client_id }}
        username: ${{ inputs.scratch_username }}
        alias: scratch
        is-scratch: true
        set-default: true

    - name: deploy to scratch org
      run: sf project deploy start --ignore-conflicts

    - name: run apex test 
      id: run-apex-test
      run: |
        apex_test_results_dir=${RUNNER_TEMP}/build/apex-test-results
        sf apex run test --code-coverage --synchronous --result-format json --output-dir ${apex_test_results_dir}

        echo "apex_test_results_dir=${apex_test_results_dir}" >> "$GITHUB_OUTPUT"

    - name: archive apex test results
      id: archive-apex-test-results
      run: |
        declare apex_test_results_dir=${{ steps.run-apex-test.outputs.apex_test_results_dir }}
        declare archive_file=${RUNNER_TEMP}/$(basename ${apex_test_results_dir}).zip

        cd $(dirname ${apex_test_results_dir})
        zip -r ${archive_file} $(basename ${apex_test_results_dir})

        echo "archive_file=${archive_file}" >> "$GITHUB_OUTPUT"

    - name: upload apex test results
      uses: actions/upload-artifact@v3
      with:
        name: apex-test-results
        path: ${{ steps.archive-apex-test-results.outputs.archive_file }}

  create-beta-package:
    needs: test
    if: ${{ inputs.create_beta_package }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: setup salesforce cli
      uses: ./.github/actions/setup-salesforce-cli

    - name: convert source to metadata
      run: |
        sf project convert source --output-dir metadata --json
        ls -lR metadata
        cat metadata/package.xml

    - name: authorize package org
      uses: ./.github/actions/authorize-org
      with:
        encoded_private_key_content: ${{ secrets.package_org_encoded_private_key_content }}
        encode_raw_key: ${{ secrets.package_org_encode_raw_key }}
        encode_iv: ${{ secrets.package_org_encode_iv }}
        client_id: ${{ secrets.package_org_client_id }}
        username: ${{ secrets.package_org_username }}
        alias: package
        set-default: true

    - name: deploy metadata to package org
      run: |
        sf project deploy start --manifest metadata/package.xml

    - name: create beta package version
      uses: ./.github/actions/create-package-version
      with:
        metadata_package_id: ${{ secrets.package_metadata_package_id }}
        version_name: ${{ inputs.package_version_name }}
        version_number: ${{ inputs.package_version_number }}
        alias: package